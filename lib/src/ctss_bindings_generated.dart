// ignore_for_file: always_specify_types
// ignore_for_file: camel_case_types
// ignore_for_file: non_constant_identifier_names

// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
// ignore_for_file: type=lint
import 'dart:ffi' as ffi;

/// Bindings for CTSS Rust SDK
///
/// Regenerate bindings with `flutter pub run ffigen --config ffigen.yaml`.
///
class CTSSBindings {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  CTSSBindings(ffi.DynamicLibrary dynamicLibrary)
      : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  CTSSBindings.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  void tss_buffer_free(
    ffi.Pointer<tss_buffer> buf,
  ) {
    return _tss_buffer_free(
      buf,
    );
  }

  late final _tss_buffer_freePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<tss_buffer>)>>(
          'tss_buffer_free');
  late final _tss_buffer_free =
      _tss_buffer_freePtr.asFunction<void Function(ffi.Pointer<tss_buffer>)>();

  int p1_keygen_init(
    ffi.Pointer<tss_buffer> session_id,
    Handle keys,
    ffi.Pointer<Handle> output,
  ) {
    return _p1_keygen_init(
      session_id,
      keys,
      output,
    );
  }

  late final _p1_keygen_initPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<tss_buffer>, Handle,
              ffi.Pointer<Handle>)>>('p1_keygen_init');
  late final _p1_keygen_init = _p1_keygen_initPtr.asFunction<
      int Function(ffi.Pointer<tss_buffer>, Handle, ffi.Pointer<Handle>)>();

  int p1_ephmeral(
    ffi.Pointer<tss_buffer> session_id,
    Handle party_keys,
    Handle keyshare,
    ffi.Pointer<Handle> output,
  ) {
    return _p1_ephmeral(
      session_id,
      party_keys,
      keyshare,
      output,
    );
  }

  late final _p1_ephmeralPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<tss_buffer>, Handle, Handle,
              ffi.Pointer<Handle>)>>('p1_ephmeral');
  late final _p1_ephmeral = _p1_ephmeralPtr.asFunction<
      int Function(
          ffi.Pointer<tss_buffer>, Handle, Handle, ffi.Pointer<Handle>)>();

  int p2_ephmeral(
    ffi.Pointer<tss_buffer> session_id,
    Handle keyshare,
    ffi.Pointer<Handle> output,
  ) {
    return _p2_ephmeral(
      session_id,
      keyshare,
      output,
    );
  }

  late final _p2_ephmeralPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<tss_buffer>, Handle,
              ffi.Pointer<Handle>)>>('p2_ephmeral');
  late final _p2_ephmeral = _p2_ephmeralPtr.asFunction<
      int Function(ffi.Pointer<tss_buffer>, Handle, ffi.Pointer<Handle>)>();

  int p2_keygen_init(
    ffi.Pointer<tss_buffer> session_id,
    ffi.Pointer<Handle> output,
  ) {
    return _p2_keygen_init(
      session_id,
      output,
    );
  }

  late final _p2_keygen_initPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<tss_buffer>, ffi.Pointer<Handle>)>>('p2_keygen_init');
  late final _p2_keygen_init = _p2_keygen_initPtr
      .asFunction<int Function(ffi.Pointer<tss_buffer>, ffi.Pointer<Handle>)>();

  int p1_keygen_gen_msg1(
    Handle session,
    ffi.Pointer<tss_buffer> output,
  ) {
    return _p1_keygen_gen_msg1(
      session,
      output,
    );
  }

  late final _p1_keygen_gen_msg1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              Handle, ffi.Pointer<tss_buffer>)>>('p1_keygen_gen_msg1');
  late final _p1_keygen_gen_msg1 = _p1_keygen_gen_msg1Ptr
      .asFunction<int Function(Handle, ffi.Pointer<tss_buffer>)>();

  int p2_keygen_process_msg1(
    Handle session,
    ffi.Pointer<tss_buffer> msg1,
    ffi.Pointer<tss_buffer> msg2_output,
  ) {
    return _p2_keygen_process_msg1(
      session,
      msg1,
      msg2_output,
    );
  }

  late final _p2_keygen_process_msg1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(Handle, ffi.Pointer<tss_buffer>,
              ffi.Pointer<tss_buffer>)>>('p2_keygen_process_msg1');
  late final _p2_keygen_process_msg1 = _p2_keygen_process_msg1Ptr.asFunction<
      int Function(Handle, ffi.Pointer<tss_buffer>, ffi.Pointer<tss_buffer>)>();

  int p1_keygen_process_msg2(
    Handle session,
    ffi.Pointer<tss_buffer> msg2,
    ffi.Pointer<tss_buffer> msg3_output,
  ) {
    return _p1_keygen_process_msg2(
      session,
      msg2,
      msg3_output,
    );
  }

  late final _p1_keygen_process_msg2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(Handle, ffi.Pointer<tss_buffer>,
              ffi.Pointer<tss_buffer>)>>('p1_keygen_process_msg2');
  late final _p1_keygen_process_msg2 = _p1_keygen_process_msg2Ptr.asFunction<
      int Function(Handle, ffi.Pointer<tss_buffer>, ffi.Pointer<tss_buffer>)>();

  int p2_keygen_process_msg3(
    Handle p2_handle,
    ffi.Pointer<tss_buffer> msg3,
  ) {
    return _p2_keygen_process_msg3(
      p2_handle,
      msg3,
    );
  }

  late final _p2_keygen_process_msg3Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              Handle, ffi.Pointer<tss_buffer>)>>('p2_keygen_process_msg3');
  late final _p2_keygen_process_msg3 = _p2_keygen_process_msg3Ptr
      .asFunction<int Function(Handle, ffi.Pointer<tss_buffer>)>();

  int p1_keygen_fini(
    Handle p1,
    ffi.Pointer<Handle> output,
  ) {
    return _p1_keygen_fini(
      p1,
      output,
    );
  }

  late final _p1_keygen_finiPtr = _lookup<
          ffi.NativeFunction<ffi.Int32 Function(Handle, ffi.Pointer<Handle>)>>(
      'p1_keygen_fini');
  late final _p1_keygen_fini = _p1_keygen_finiPtr
      .asFunction<int Function(Handle, ffi.Pointer<Handle>)>();

  int p2_keygen_fini(
    Handle p2,
    ffi.Pointer<Handle> output,
  ) {
    return _p2_keygen_fini(
      p2,
      output,
    );
  }

  late final _p2_keygen_finiPtr = _lookup<
          ffi.NativeFunction<ffi.Int32 Function(Handle, ffi.Pointer<Handle>)>>(
      'p2_keygen_fini');
  late final _p2_keygen_fini = _p2_keygen_finiPtr
      .asFunction<int Function(Handle, ffi.Pointer<Handle>)>();

  int p1_keygen_error_msg(
    Handle p1,
    ffi.Pointer<tss_buffer> msg,
  ) {
    return _p1_keygen_error_msg(
      p1,
      msg,
    );
  }

  late final _p1_keygen_error_msgPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              Handle, ffi.Pointer<tss_buffer>)>>('p1_keygen_error_msg');
  late final _p1_keygen_error_msg = _p1_keygen_error_msgPtr
      .asFunction<int Function(Handle, ffi.Pointer<tss_buffer>)>();

  int p2_keygen_error_msg(
    Handle p2,
    ffi.Pointer<tss_buffer> msg,
  ) {
    return _p2_keygen_error_msg(
      p2,
      msg,
    );
  }

  late final _p2_keygen_error_msgPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              Handle, ffi.Pointer<tss_buffer>)>>('p2_keygen_error_msg');
  late final _p2_keygen_error_msg = _p2_keygen_error_msgPtr
      .asFunction<int Function(Handle, ffi.Pointer<tss_buffer>)>();

  int p1_keyshare_from_bytes(
    ffi.Pointer<tss_buffer> buf,
    ffi.Pointer<Handle> hnd,
  ) {
    return _p1_keyshare_from_bytes(
      buf,
      hnd,
    );
  }

  late final _p1_keyshare_from_bytesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<tss_buffer>,
              ffi.Pointer<Handle>)>>('p1_keyshare_from_bytes');
  late final _p1_keyshare_from_bytes = _p1_keyshare_from_bytesPtr
      .asFunction<int Function(ffi.Pointer<tss_buffer>, ffi.Pointer<Handle>)>();

  int p1_keyshare_to_bytes(
    Handle share,
    ffi.Pointer<tss_buffer> buf,
  ) {
    return _p1_keyshare_to_bytes(
      share,
      buf,
    );
  }

  late final _p1_keyshare_to_bytesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              Handle, ffi.Pointer<tss_buffer>)>>('p1_keyshare_to_bytes');
  late final _p1_keyshare_to_bytes = _p1_keyshare_to_bytesPtr
      .asFunction<int Function(Handle, ffi.Pointer<tss_buffer>)>();

  int p1_keyshare_public_key(
    Handle share,
    ffi.Pointer<tss_buffer> buf,
  ) {
    return _p1_keyshare_public_key(
      share,
      buf,
    );
  }

  late final _p1_keyshare_public_keyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              Handle, ffi.Pointer<tss_buffer>)>>('p1_keyshare_public_key');
  late final _p1_keyshare_public_key = _p1_keyshare_public_keyPtr
      .asFunction<int Function(Handle, ffi.Pointer<tss_buffer>)>();

  int p1_keyshare_free(
    Handle hnd,
  ) {
    return _p1_keyshare_free(
      hnd,
    );
  }

  late final _p1_keyshare_freePtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(Handle)>>(
          'p1_keyshare_free');
  late final _p1_keyshare_free =
      _p1_keyshare_freePtr.asFunction<int Function(Handle)>();

  int p2_keyshare_from_bytes(
    ffi.Pointer<tss_buffer> buf,
    ffi.Pointer<Handle> hnd,
  ) {
    return _p2_keyshare_from_bytes(
      buf,
      hnd,
    );
  }

  late final _p2_keyshare_from_bytesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<tss_buffer>,
              ffi.Pointer<Handle>)>>('p2_keyshare_from_bytes');
  late final _p2_keyshare_from_bytes = _p2_keyshare_from_bytesPtr
      .asFunction<int Function(ffi.Pointer<tss_buffer>, ffi.Pointer<Handle>)>();

  int p2_keyhare_to_bytes(
    Handle share,
    ffi.Pointer<tss_buffer> buf,
  ) {
    return _p2_keyhare_to_bytes(
      share,
      buf,
    );
  }

  late final _p2_keyhare_to_bytesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              Handle, ffi.Pointer<tss_buffer>)>>('p2_keyhare_to_bytes');
  late final _p2_keyhare_to_bytes = _p2_keyhare_to_bytesPtr
      .asFunction<int Function(Handle, ffi.Pointer<tss_buffer>)>();

  int p2_keyshare_public_key(
    Handle share,
    ffi.Pointer<tss_buffer> buf,
  ) {
    return _p2_keyshare_public_key(
      share,
      buf,
    );
  }

  late final _p2_keyshare_public_keyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              Handle, ffi.Pointer<tss_buffer>)>>('p2_keyshare_public_key');
  late final _p2_keyshare_public_key = _p2_keyshare_public_keyPtr
      .asFunction<int Function(Handle, ffi.Pointer<tss_buffer>)>();

  int p2_keyshare_free(
    Handle hnd,
  ) {
    return _p2_keyshare_free(
      hnd,
    );
  }

  late final _p2_keyshare_freePtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(Handle)>>(
          'p2_keyshare_free');
  late final _p2_keyshare_free =
      _p2_keyshare_freePtr.asFunction<int Function(Handle)>();

  Handle p1_partykeys_new() {
    return _p1_partykeys_new();
  }

  late final _p1_partykeys_newPtr =
      _lookup<ffi.NativeFunction<Handle Function()>>('p1_partykeys_new');
  late final _p1_partykeys_new =
      _p1_partykeys_newPtr.asFunction<Handle Function()>();

  int p1_partykeys_from_bytes(
    ffi.Pointer<tss_buffer> bytes,
    ffi.Pointer<Handle> hnd,
  ) {
    return _p1_partykeys_from_bytes(
      bytes,
      hnd,
    );
  }

  late final _p1_partykeys_from_bytesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<tss_buffer>,
              ffi.Pointer<Handle>)>>('p1_partykeys_from_bytes');
  late final _p1_partykeys_from_bytes = _p1_partykeys_from_bytesPtr
      .asFunction<int Function(ffi.Pointer<tss_buffer>, ffi.Pointer<Handle>)>();

  int p1_partykeys_to_bytes(
    Handle keys,
    ffi.Pointer<tss_buffer> buf,
  ) {
    return _p1_partykeys_to_bytes(
      keys,
      buf,
    );
  }

  late final _p1_partykeys_to_bytesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              Handle, ffi.Pointer<tss_buffer>)>>('p1_partykeys_to_bytes');
  late final _p1_partykeys_to_bytes = _p1_partykeys_to_bytesPtr
      .asFunction<int Function(Handle, ffi.Pointer<tss_buffer>)>();

  int p1_partykeys_message_pk(
    Handle keys,
    ffi.Pointer<tss_buffer> pk,
  ) {
    return _p1_partykeys_message_pk(
      keys,
      pk,
    );
  }

  late final _p1_partykeys_message_pkPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              Handle, ffi.Pointer<tss_buffer>)>>('p1_partykeys_message_pk');
  late final _p1_partykeys_message_pk = _p1_partykeys_message_pkPtr
      .asFunction<int Function(Handle, ffi.Pointer<tss_buffer>)>();

  int p1_partykeys_message_sign(
    Handle keys,
    ffi.Pointer<tss_buffer> message,
    ffi.Pointer<tss_buffer> signature,
  ) {
    return _p1_partykeys_message_sign(
      keys,
      message,
      signature,
    );
  }

  late final _p1_partykeys_message_signPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(Handle, ffi.Pointer<tss_buffer>,
              ffi.Pointer<tss_buffer>)>>('p1_partykeys_message_sign');
  late final _p1_partykeys_message_sign =
      _p1_partykeys_message_signPtr.asFunction<
          int Function(
              Handle, ffi.Pointer<tss_buffer>, ffi.Pointer<tss_buffer>)>();

  int p1_verify_message(
    ffi.Pointer<tss_buffer> pk,
    ffi.Pointer<tss_buffer> msg,
    ffi.Pointer<tss_buffer> sign,
  ) {
    return _p1_verify_message(
      pk,
      msg,
      sign,
    );
  }

  late final _p1_verify_messagePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<tss_buffer>, ffi.Pointer<tss_buffer>,
              ffi.Pointer<tss_buffer>)>>('p1_verify_message');
  late final _p1_verify_message = _p1_verify_messagePtr.asFunction<
      int Function(ffi.Pointer<tss_buffer>, ffi.Pointer<tss_buffer>,
          ffi.Pointer<tss_buffer>)>();

  int p1_init_signer(
    ffi.Pointer<tss_buffer> session_id,
    Handle keyshare,
    ffi.Pointer<tss_buffer> message_hash,
    ffi.Pointer<Handle> p1_out,
  ) {
    return _p1_init_signer(
      session_id,
      keyshare,
      message_hash,
      p1_out,
    );
  }

  late final _p1_init_signerPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<tss_buffer>, Handle,
              ffi.Pointer<tss_buffer>, ffi.Pointer<Handle>)>>('p1_init_signer');
  late final _p1_init_signer = _p1_init_signerPtr.asFunction<
      int Function(ffi.Pointer<tss_buffer>, Handle, ffi.Pointer<tss_buffer>,
          ffi.Pointer<Handle>)>();

  int p2_init_signer(
    ffi.Pointer<tss_buffer> session_id,
    Handle keyshare,
    ffi.Pointer<tss_buffer> message_hash,
    ffi.Pointer<Handle> p2_out,
  ) {
    return _p2_init_signer(
      session_id,
      keyshare,
      message_hash,
      p2_out,
    );
  }

  late final _p2_init_signerPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<tss_buffer>, Handle,
              ffi.Pointer<tss_buffer>, ffi.Pointer<Handle>)>>('p2_init_signer');
  late final _p2_init_signer = _p2_init_signerPtr.asFunction<
      int Function(ffi.Pointer<tss_buffer>, Handle, ffi.Pointer<tss_buffer>,
          ffi.Pointer<Handle>)>();

  int p1_signer_gen_msg1(
    Handle handle,
    ffi.Pointer<tss_buffer> msg1_out,
  ) {
    return _p1_signer_gen_msg1(
      handle,
      msg1_out,
    );
  }

  late final _p1_signer_gen_msg1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              Handle, ffi.Pointer<tss_buffer>)>>('p1_signer_gen_msg1');
  late final _p1_signer_gen_msg1 = _p1_signer_gen_msg1Ptr
      .asFunction<int Function(Handle, ffi.Pointer<tss_buffer>)>();

  int p2_signer_process_msg1(
    Handle handle,
    ffi.Pointer<tss_buffer> msg1,
    ffi.Pointer<tss_buffer> msg2_out,
  ) {
    return _p2_signer_process_msg1(
      handle,
      msg1,
      msg2_out,
    );
  }

  late final _p2_signer_process_msg1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(Handle, ffi.Pointer<tss_buffer>,
              ffi.Pointer<tss_buffer>)>>('p2_signer_process_msg1');
  late final _p2_signer_process_msg1 = _p2_signer_process_msg1Ptr.asFunction<
      int Function(Handle, ffi.Pointer<tss_buffer>, ffi.Pointer<tss_buffer>)>();

  int p1_signer_process_msg2(
    Handle handle,
    ffi.Pointer<tss_buffer> msg2,
    ffi.Pointer<tss_buffer> msg3_out,
  ) {
    return _p1_signer_process_msg2(
      handle,
      msg2,
      msg3_out,
    );
  }

  late final _p1_signer_process_msg2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(Handle, ffi.Pointer<tss_buffer>,
              ffi.Pointer<tss_buffer>)>>('p1_signer_process_msg2');
  late final _p1_signer_process_msg2 = _p1_signer_process_msg2Ptr.asFunction<
      int Function(Handle, ffi.Pointer<tss_buffer>, ffi.Pointer<tss_buffer>)>();

  int p2_signer_process_msg3(
    Handle handle,
    ffi.Pointer<tss_buffer> msg3,
    ffi.Pointer<tss_buffer> msg4_out,
  ) {
    return _p2_signer_process_msg3(
      handle,
      msg3,
      msg4_out,
    );
  }

  late final _p2_signer_process_msg3Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(Handle, ffi.Pointer<tss_buffer>,
              ffi.Pointer<tss_buffer>)>>('p2_signer_process_msg3');
  late final _p2_signer_process_msg3 = _p2_signer_process_msg3Ptr.asFunction<
      int Function(Handle, ffi.Pointer<tss_buffer>, ffi.Pointer<tss_buffer>)>();

  int p1_signer_process_msg4(
    Handle handle,
    ffi.Pointer<tss_buffer> msg4,
    ffi.Pointer<tss_buffer> msg5_out,
  ) {
    return _p1_signer_process_msg4(
      handle,
      msg4,
      msg5_out,
    );
  }

  late final _p1_signer_process_msg4Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(Handle, ffi.Pointer<tss_buffer>,
              ffi.Pointer<tss_buffer>)>>('p1_signer_process_msg4');
  late final _p1_signer_process_msg4 = _p1_signer_process_msg4Ptr.asFunction<
      int Function(Handle, ffi.Pointer<tss_buffer>, ffi.Pointer<tss_buffer>)>();

  int p1_singer_fini(
    Handle p1,
    ffi.Pointer<tss_buffer> output,
  ) {
    return _p1_singer_fini(
      p1,
      output,
    );
  }

  late final _p1_singer_finiPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              Handle, ffi.Pointer<tss_buffer>)>>('p1_singer_fini');
  late final _p1_singer_fini = _p1_singer_finiPtr
      .asFunction<int Function(Handle, ffi.Pointer<tss_buffer>)>();

  int p2_signer_process_msg5(
    Handle handle,
    ffi.Pointer<tss_buffer> msg5,
    ffi.Pointer<tss_buffer> sign_out,
  ) {
    return _p2_signer_process_msg5(
      handle,
      msg5,
      sign_out,
    );
  }

  late final _p2_signer_process_msg5Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(Handle, ffi.Pointer<tss_buffer>,
              ffi.Pointer<tss_buffer>)>>('p2_signer_process_msg5');
  late final _p2_signer_process_msg5 = _p2_signer_process_msg5Ptr.asFunction<
      int Function(Handle, ffi.Pointer<tss_buffer>, ffi.Pointer<tss_buffer>)>();

  int p1_signer_error_msg(
    Handle p1,
    ffi.Pointer<tss_buffer> msg,
  ) {
    return _p1_signer_error_msg(
      p1,
      msg,
    );
  }

  late final _p1_signer_error_msgPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              Handle, ffi.Pointer<tss_buffer>)>>('p1_signer_error_msg');
  late final _p1_signer_error_msg = _p1_signer_error_msgPtr
      .asFunction<int Function(Handle, ffi.Pointer<tss_buffer>)>();

  int p2_signer_error_msg(
    Handle p2,
    ffi.Pointer<tss_buffer> msg,
  ) {
    return _p2_signer_error_msg(
      p2,
      msg,
    );
  }

  late final _p2_signer_error_msgPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              Handle, ffi.Pointer<tss_buffer>)>>('p2_signer_error_msg');
  late final _p2_signer_error_msg = _p2_signer_error_msgPtr
      .asFunction<int Function(Handle, ffi.Pointer<tss_buffer>)>();
}

abstract class tss_error {
  static const int TSS_OK = 0;
  static const int TSS_NO_ERROR = 1;
  static const int TSS_INVALID_HANDLE = 2;
  static const int TSS_HANDLE_IN_USE = 3;
  static const int TSS_INVALID_HANDLE_TYPE = 4;
  static const int TSS_NULL_PTR = 5;
  static const int TSS_INVALID_SESSION_ID = 6;
  static const int TSS_INVALID_SESSION_STATE = 7;
  static const int TSS_UNKNOWN_ERROR = 8;
  static const int TSS_SERIALIZATION_ERROR = 9;
  static const int TSS_PROCESS_MESSAGE_ERROR = 10;
  static const int TSS_INVALID_MSG_HASH = 11;
  static const int TSS_INVALID_DERIVATION_PATH_STR = 12;
  static const int TSS_MESSAGE_SIGNATURE = 13;
  static const int TSS_MESSAGE_SIGN_PK = 14;
  static const int TSS_MESSAGE_SIGN_VERIFY = 15;
}

final class tss_buffer extends ffi.Struct {
  external ffi.Pointer<ffi.Uint8> ptr;

  @ffi.UintPtr()
  external int len;
}

final class Handle extends ffi.Struct {
  @ffi.Int32()
  external int _0;
}
